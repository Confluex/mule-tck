package com.confluex.mule.test.event

import org.mule.api.MuleMessage
import org.mule.api.context.notification.ServerNotification
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit

abstract class BaseBlockingEventListener<T extends ServerNotification> {
    Logger log = LoggerFactory.getLogger(this.getClass())
    final CountDownLatch latch

    BaseBlockingEventListener(Integer expectedCount = 1) {
        this.latch = new CountDownLatch(expectedCount)
    }

    abstract protected boolean matches(T notification)

    /** template method allowing subclasses to react to matched notifications */
    protected void onMatched(T notification) {}

    /**
     * Will count down the latch if the notification action matches the template method.
     *
     * @param notification generated by mule
     * @see #matches(T)
     */
    @Override
    public void onNotification(T notification) {
        if (matches(notification)) {
            onMatched(notification)
            latch.countDown()
            log.debug("Latch count={}", latch.count)
        }
    }

    /**
     * Block until the count down latch has completed or time out.
     *
     * @param timeout the number of ms to wait until we give up
     * @return true if all expected events have occurred. false if timed out.
     */
    protected Boolean waitForEvents(long timeout = 10000) {
        log.info("Waiting for latch to release with {} events remaining", latch.count)
        return latch.await(timeout, TimeUnit.MILLISECONDS)
    }
}
